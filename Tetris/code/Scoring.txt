package Main;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class Scoring {

    // Оголошення змінної filePath зі значенням шляху до папки за замовчуванням
    private static String filePath = getDefaultDirectory() + "/Tetris/";
    // Оголошення змінної HIGHSCOREPATH зі значенням шляху до файлу з рекордами
    public static String HIGHSCOREPATH = getDefaultDirectory() + "/Tetris/Highscores.txt";

    // Метод init(), який викликається під час ініціалізації класу і створює директорію та файл для рекордів
    public static void init() {
        createDir(filePath);
        createFile(HIGHSCOREPATH);
    }

    // Метод readFile(), який зчитує дані з файлу та записує їх у масив
    public static int[] readFile(String filePath) {
        int[] scores = {0, 0, 0, 0, 0};
        File file = new File(filePath);
        if (file.exists()) {
            Scanner scanner = null;
            try {
                scanner = new Scanner(file);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            int line = 0;
            while (scanner.hasNextInt()) {
                scores[line] = scanner.nextInt();
                line++;
            }
            scanner.close();
            return scores;
        } else {
            createFile(filePath);
            return scores;
        }
    }

    // Метод SaveScores(), який видаляє старий файл з рекордами, створює новий та записує в нього оновлені рекорди
    public static void SaveScores(int[] scores) {
        deleteFile(filePath + "HighScores.txt");
        createFile(filePath + "HighScores.txt");
        writeFile(new File(filePath + "HighScores.txt"), scores);
    }

    // Метод createFile(), який створює новий файл та записує у нього значення рекордів за замовчуванням
    public static void createFile(String filePath) {
        File path = new File(filePath);
        if (!path.exists()) {
            try {
                path.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
            int[] scores = {0, 0, 0, 0, 0};
            writeFile(path, scores);
        }
    }

    // Метод createDir(), який створює нову директорію за необхідності
    public static void createDir(String filePath) {
        File path = new File(filePath);
        if (!path.exists()) {
            path.mkdir();
        }
    }

    // Метод writeFile(), який записує рекорди в файл
    public static void writeFile(File file, int[] scores) {
        FileWriter writer;
        try {
            writer = new FileWriter(file);
            for (int i = 0; i < scores.length; i++) {
                writer.write(scores[i] + "\n");
            }
            System.out.println();
            writer.close();
        } catch (IOException e) {
        }
    }

    // Функція для видалення файлу за заданим шляхом
    public static void deleteFile(String filePath) {
        File file = new File(filePath);
        if (file.exists()) { // перевіряємо, чи існує файл за вказаним шляхом
            file.delete(); // якщо файл існує, то видаляємо його
        }
    }

    // Функція для отримання шляху до папки за замовчуванням для збереження даних в залежності від ОС
    public static String getDefaultDirectory() {
        String OS = System.getProperty("os.name").toUpperCase(); // отримуємо ім'я ОС, на якій запущена програма та перетворюємо його в верхній регістр
        if (OS.contains("WIN")) { // якщо ім'я містить "WIN", то запущена програма на Windows
            return System.getenv("APPDATA"); // повертаємо шлях до папки з даними за замовчуванням для Windows
        }
        if (OS.contains("MAC")) { // Якщо запущена програма на Mac, повертаємо шлях до папки з даними за замовчуванням для цієї ОС
            return System.getProperty("user.home") + "/Library/Application Support";
        }
        return System.getProperty("user.home"); // якщо запущена програма на Mac або Linux, то повертаємо шлях до папки з даними за замовчуванням для цих ОС
    }
}
